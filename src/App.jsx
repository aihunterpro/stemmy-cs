import React, { useEffect, useRef, useState, useMemo } from 'react';

const features = [
  {
    title: 'Capture Everywhere',
    text: 'From web pages and PDFs to real-life conversations, instantly save any word or phrase you encounter.',
    iconColor: 'bg-primary-purple text-white',
    icon: (
      <svg className="h-9 w-9" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M10 13a5 5 0 007.546-0.607l1.875-1.875a5 5 0 00-7.072-7.071L10 5.929" /><path d="M14 11a5 5 0 00-7.546 0.607L4.58 13.49a5 5 0 007.072 7.071l1.875-1.875" /></svg>
    )
  },
  {
    title: 'AI-Powered Insights',
    text: 'Go beyond definitions with rich context, usage examples, and memory aids generated by our advanced AI.',
    iconColor: 'bg-secondary-teal text-white',
    icon: (
      <svg className="h-9 w-9" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/></svg>
    )
  },
  {
    title: 'Learn for Life',
    text: 'Our smart algorithm schedules reviews at scientifically proven intervals so you never forget.',
    iconColor: 'bg-accent-amber text-dark-text',
    icon: (
      <svg className="h-9 w-9" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>
    )
  },
  {
    title: 'Your Personal Storyteller',
    text: 'Receive AI-generated stories and podcasts that creatively weave in your new words, making learning effortless.',
    iconColor: 'bg-dark-text text-white',
    icon: (
      <svg className="h-9 w-9" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/><path d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
    )
  }
];

export default function App() {
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isDark, setIsDark] = useState(false);
  const featureRefs = useRef([]);

  const rainElements = useMemo(() => {
    const pool = ['learn', 'word', 'speak', 'write', 'read', 'hello', 'story', 'quiz', 'grammar', 'vocab', 'memory'];
    return Array.from({ length: 40 }, () => {
      const text = pool[Math.floor(Math.random() * pool.length)];
      return {
        text,
        left: Math.random() * 100, // percentage
        duration: 10 + Math.random() * 12, // 10-22s
        delay: Math.random() * 20, // 0-20s
        fontSize: 0.8 + Math.random() * 1.8, // 0.8-2.6rem
      };
    });
  }, []);

  // Initialize theme based on localStorage or system preference
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
      document.documentElement.classList.add('dark');
      setIsDark(true);
    }
  }, []);

  const toggleTheme = () => {
    const html = document.documentElement;
    if (html.classList.contains('dark')) {
      html.classList.remove('dark');
      localStorage.setItem('theme', 'light');
      setIsDark(false);
    } else {
      html.classList.add('dark');
      localStorage.setItem('theme', 'dark');
      setIsDark(true);
    }
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      },
      { threshold: 0.1 }
    );

    featureRefs.current.forEach((ref) => {
      if (ref) observer.observe(ref);
    });

    return () => {
      featureRefs.current.forEach((ref) => {
        if (ref) observer.unobserve(ref);
      });
    };
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const emailInput = e.target.email;
    if (!emailInput.checkValidity()) {
      setMessage('Please enter a valid email address.');
      return;
    }
    const email = emailInput.value.trim().toLowerCase();

    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Something went wrong');
      }

      setMessage(data.message);
      e.target.reset();
    } catch (error) {
      setMessage(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Enhanced Background Effects */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        {/* Mesh Gradient Background */}
        <div className="absolute inset-0 mesh-gradient bg-animate" />
        
        {/* Floating Particles */}
        {Array.from({ length: 8 }).map((_, i) => (
          <div
            key={i}
            className="particle"
            style={{
              '--particle-color-start': `rgba(139, 92, 246, ${0.1 + (i * 0.02)})`,
              '--particle-color-end': `rgba(67, 56, 202, ${0.05 + (i * 0.02)})`,
              '--drift-x': `${-20 + Math.random() * 40}%`,
              '--drift-y': `${-20 + Math.random() * 40}%`,
              width: `${100 + (i * 50)}px`,
              height: `${100 + (i * 50)}px`,
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${-i * 2}s`
            }}
          />
        ))}
      </div>

      {/* Theme toggle */}
      <div className="fixed top-4 right-4 z-50 flex flex-col items-end gap-2">
        <a
          href="mailto:stemmyapp@gmail.com"
          aria-label="Contact us"
          className="group flex h-10 w-10 items-center justify-center rounded-full bg-white/70 text-primary-purple backdrop-blur shadow transition-all hover:shadow-lg dark:bg-dark-text dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-purple"
          tabIndex={0}
          title="Contact us"
        >
          {/* Envelope icon */}
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
          <span className="sr-only">Contact us</span>
        </a>
      </div>

      <div className="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <header className="py-12 text-center animate-[fadeInUp_.8s_ease-out_forwards]" style={{ animationDelay: '.15s' }}>
          <h1 className="font-display text-5xl md:text-6xl font-extrabold tracking-tight text-primary-purple hover-lift">Stemmy.app</h1>
        </header>

        {/* Hero */}
        <section className="flex min-h-[60vh] flex-col items-center text-center">
          <div className="max-w-4xl">
            <h2
              className="animate-[fadeInUp_.8s_ease-out_forwards] mb-6 font-display text-5xl font-black leading-tight tracking-tight text-dark-text md:text-8xl"
              style={{ animationDelay: '.25s' }}
            >
              Stop collecting words.
              <br />
              <span className="text-primary-purple hover-lift inline-block">Start living them.</span>
            </h2>

            <p className="animate-[fadeInUp_.8s_ease-out_forwards] mb-10 text-xl font-light md:text-2xl" style={{ animationDelay: '.35s' }}>
              Stemmy is the first app that captures any vocabulary you encounter and transforms it into personalized stories, news, and quizzes that wire words into your long-term memory.
            </p>

            <form
              onSubmit={handleSubmit}
              className="animate-[fadeInUp_.8s_ease-out_forwards] mx-auto flex w-full max-w-lg flex-col gap-4 sm:flex-row"
              style={{ animationDelay: '.45s' }}
            >
              <input
                type="email"
                name="email"
                required
                placeholder="Enter your email address"
                className="focus-ring flex-grow rounded-xl border border-gray-300 bg-white/90 px-5 py-4 text-lg text-gray-900 shadow-sm backdrop-blur transition-all duration-300 hover:bg-white"
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={isLoading}
                className="hover-glow rounded-xl bg-primary-purple-button px-8 py-4 text-lg font-bold text-white shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Subscribing...' : 'Get Early Access'}
              </button>
            </form>
            <div className={`min-h-[1.5em] ${message.includes('error') || message.includes('already') ? 'text-red-500' : 'text-secondary-teal'}`}>
              {message}
            </div>
          </div>
        </section>

        {/* Features */}
        <section className="py-20 md:py-32">
          <div className="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
            {features.map((f, i) => (
              <div
                key={f.title}
                className="feature-card opacity-0 transform transition-all duration-700"
                ref={el => (featureRefs.current[i] = el)}
              >
                <div className={`icon-wrapper mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-2xl ${f.iconColor} shadow`}>
                  {f.icon}
                </div>
                <h3 className="mb-2 text-2xl font-bold text-dark-text hover-lift">{f.title}</h3>
                <p>{f.text}</p>
              </div>
            ))}
          </div>
        </section>

        {/* Footer */}
        <footer className="border-t border-gray-200 py-8 text-center">
          <p className="hover-lift">
            &copy; {new Date().getFullYear()} Stemmy.app. All rights&nbsp;reserved.
          </p>
        </footer>
      </div>
    </>
  );
} 