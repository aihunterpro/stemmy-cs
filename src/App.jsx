import React, { useEffect, useState } from 'react';
import BackgroundEffects from './components/BackgroundEffects';

const features = [
  {
    title: 'Capture Everywhere',
    text: 'From web pages and PDFs to real-life conversations, instantly save any word or phrase you encounter.',
    icon: (
      <svg className="h-8 w-8" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M10 13a5 5 0 007.546-0.607l1.875-1.875a5 5 0 00-7.072-7.071L10 5.929" /><path d="M14 11a5 5 0 00-7.546 0.607L4.58 13.49a5 5 0 007.072 7.071l1.875-1.875" /></svg>
    )
  },
  {
    title: 'AI-Powered Insights',
    text: 'Go beyond definitions with rich context, usage examples, and memory aids generated by our advanced AI.',
    icon: (
      <svg className="h-8 w-8" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/></svg>
    )
  },
  {
    title: 'Learn for Life',
    text: 'Our smart algorithm schedules reviews at scientifically proven intervals so you never forget.',
    icon: (
      <svg className="h-8 w-8" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>
    )
  },
  {
    title: 'Your Personal Storyteller',
    text: 'Receive AI-generated stories and podcasts that creatively weave in your new words, making learning effortless.',
    icon: (
      <svg className="h-8 w-8" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24"><path d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/><path d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
    )
  }
];

export default function App() {
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
      document.documentElement.classList.add('dark');
      setIsDark(true);
    }
  }, []);

  const toggleTheme = () => {
    const html = document.documentElement;
    if (html.classList.contains('dark')) {
      html.classList.remove('dark');
      localStorage.setItem('theme', 'light');
      setIsDark(false);
    } else {
      html.classList.add('dark');
      localStorage.setItem('theme', 'dark');
      setIsDark(true);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const emailInput = e.target.email;
    if (!emailInput.checkValidity()) {
      setMessage('Please enter a valid email address.');
      return;
    }
    const email = emailInput.value.trim().toLowerCase();
    setIsLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email }),
      });
      const data = await response.json();
      if (!response.ok) throw new Error(data.error || 'Something went wrong');
      setMessage(data.message);
      e.target.reset();
    } catch (error) {
      setMessage(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <BackgroundEffects />

      {/* Header */}
      <header className="flex justify-between items-center p-4 max-w-7xl mx-auto">
        <div className="text-xl font-bold tracking-tight">Stemmy</div>
        <div className="flex items-center gap-4">
          <button onClick={toggleTheme} className="focus-ring rounded-full p-2" aria-label="Toggle theme">
            {isDark ? (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
            ) : (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
            )}
          </button>
          <a
            href="#subscribe"
            className="hidden sm:inline-block bg-slate-900 text-white dark:bg-white dark:text-black px-5 py-2.5 rounded-full text-sm font-semibold hover:bg-slate-800 dark:hover:bg-slate-200 transition-colors focus-ring"
          >
            Get Early Access
          </a>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4">
        {/* Hero */}
        <section className="text-center py-20 sm:py-32">
          <h1 className="text-5xl md:text-7xl font-extrabold tracking-tight">
            Stop collecting words.
            <br />
            Start <span className="font-serif italic font-medium text-slate-700 dark:text-slate-400">living</span> them.
          </h1>
          <p className="mt-6 max-w-2xl mx-auto text-lg text-slate-600 dark:text-slate-400">
            Stemmy is the first app that captures any vocabulary you encounter and transforms it into personalized stories, news, and quizzes that wire words into your long-term memory.
          </p>
          <form
            id="subscribe"
            onSubmit={handleSubmit}
            className="mt-8 max-w-md mx-auto flex gap-3"
          >
            <input
              type="email"
              name="email"
              required
              placeholder="Enter your email"
              className="focus-ring flex-grow rounded-full border border-slate-300 dark:border-slate-700 bg-white/50 dark:bg-black/50 px-5 py-3 text-base placeholder:text-slate-500"
              disabled={isLoading}
            />
            <button
              type="submit"
              disabled={isLoading}
              className="focus-ring bg-slate-900 text-white dark:bg-white dark:text-black px-8 py-3 rounded-full text-base font-semibold hover:bg-slate-800 dark:hover:bg-slate-200 transition-colors disabled:opacity-50"
            >
              {isLoading ? 'Joining...' : 'Join'}
            </button>
          </form>
          <div className="mt-4 text-sm h-6 text-slate-600 dark:text-slate-400">
            {message}
          </div>
        </section>

        {/* Features */}
        <section className="py-20 sm:py-32">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-12 gap-y-16">
            {features.map(feature => (
              <div key={feature.title} className="flex gap-6">
                <div className="w-10 h-10 flex-shrink-0 text-slate-600 dark:text-slate-400">{feature.icon}</div>
                <div>
                  <h3 className="text-xl font-semibold">{feature.title}</h3>
                  <p className="mt-2 text-slate-600 dark:text-slate-400 leading-relaxed">{feature.text}</p>
                </div>
              </div>
            ))}
          </div>
        </section>
      </main>

      {/* Footer */}
      <footer className="py-12 text-center text-sm text-slate-500 dark:text-slate-600">
        <p>
          &copy; {new Date().getFullYear()} Stemmy.app. All rights&nbsp;reserved.
        </p>
      </footer>
    </>
  );
} 